std::thread::hardware_concurrency();
如果无法获取到信息也会返回0.
如果只是利用多线程去计算简单的累加和，在数据量较小的时候，多线程会优于单线程，但是在数据量比较大的时候（如一百万），单线程优于多线程，所以多线程可能比较适合执行复杂一点的任务，只是计算累加并不占优势。
advance迭代器就是将迭代器it，移动n位。如果it是随机访问迭代器，那么函数进行1次运算符计算操作，否则函数将对迭代器进行n次迭代计算操作。注意如果移动5次，则输出的是第6个元素而不是第五个元素。
std::list<int>::iterator it=mylist.begin();
std::advance(it,5);//it=it+5是错误的，因为list不是顺序存储结构。
unsigned long const length=std::distance(first,last);//数列的长度，first + n  = last,n可能为负
result=std::accumulate(first,last,result);//区间[),第三个参数为累加的初值

But it’s important to bear in mind that by default the arguments are copied into internal storage, where they can be accessed by the newly created thread of execution,
even if the corresponding parameter in the function is expecting a reference. 

/****thread_guard****/


class thread_guard
{
std::thread& t;
public:
explicit thread_guard(std::thread& t_):
t(t_)
{}
~thread_guard()
{
if(t.joinable())
{
t.join();
}
}
thread_guard(thread_guard const&)=delete;
thread_guard& operator=(thread_guard const&)=delete;
};
struct func;
void f()
{
int some_local_state=0;
func my_func(some_local_state);
std::thread t(my_func);
thread_guard g(t);
do_something_in_current_thread();
}





传参：

1.void f(int i,std::string const& s);
void oops(int some_param)
{
char buffer[1024];
sprintf(buffer, "%i",some_param);
std::thread t(f,3,buffer);//对buffer指针做了拷贝，而在线程中还需要将其转换为指向string的引用，比较耗时，所以容易出错
t.detach();
}
修改：
void not_oops(int some_param)
{
char buffer[1024];
sprintf(buffer,"%i",some_param);
std::thread t(f,3,std::string(buffer));
t.detach();
}
2.要对传入的参数进行修改保存
void update_data_for_widget(widget_id w,widget_data& data);
void oops_again(widget_id w)
{
widget_data data;
std::thread t(update_data_for_widget,w,data);//原始的，多线程的计算结果不会对当前线程的data产生影响，所以需要修改为： std::thread t(update_data_for_widget,w,std::ref(data));
display_status();
t.join();
process_widget_data(data);
}

3.新建一个std::thread对象的时候，可以传递函数，类函数对象（void operator()(){}）,还可以传递类里面的普通函数，但需要一定的规则如下：
class X
{
public:
void do_lengthy_work();
};
X my_x;
std::thread t(&X::do_lengthy_work,&my_x);//类似std::bind
4.对于传递的参数无法copy的情况，如unique_ptr,需要使用move
void process_big_object(std::unique_ptr<big_object>);
std::unique_ptr<big_object> p(new big_object);
p->prepare_data(42);
std::thread t(process_big_object,std::move(p));

/********传递ownership**********/
many resource-owning types in the C++ Standard Library such as std::ifstream and std::unique_ptr are movable but not copyable, and std::thread is one of them. 
void some_function();
void some_other_function();
std::thread t1(some_function);
std::thread t2=std::move(t1);
t1=std::thread(some_other_function);//临时变量可以不使用move，是implicit
std::thread t3;
t3=std::move(t2);
t1=std::move(t3);//因为t1之前和一个临时变量关联，现在关联了t3关联的线程，则原有的会终止（终止，还是失去控制权生存周期在当前调用线程结束不确定）

!!ownership可以通过函数return,也可以当做参数传递（需要使用move,临时变量implicit转换）
std::thread f()
{
void some_function();
return std::thread(some_function);
}
std::thread g()
{
void some_other_function(int);
std::thread t(some_other_function,42);
return t;//返回的时候不需要使用move,但是在使用返回值给thread对象赋值的使用最好加上move
}

void f(std::thread t);
void g()
{
void some_function();
f(std::thread(some_function));
std::thread t(some_function);
f(std::move(t));//!!!!!!!!!!!!!!!!
}


!!!!!
class scoped_thread
{
std::thread t;
public:
explicit scoped_thread(std::thread t_):
t(std::move(t_))
{
if(!t.joinable())
throw std::logic_error(“No thread”);
}
~scoped_thread()
{
t.join();
}
scoped_thread(scoped_thread const&)=delete;
scoped_thread& operator=(scoped_thread const&)=delete;
};
struct func;
void f()
{
int some_local_state;
scoped_thread t(std::thread(func(some_local_state)));
do_something_in_current_thread();
}

